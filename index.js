// Generated by CoffeeScript 1.8.0
var Auth, Basic, Hapi, Joi, User, auth, client, server, users;

Hapi = require('hapi');

Basic = require('hapi-auth-basic');

Joi = require('Joi');

Auth = require('./auth.js');

User = require('./user.js');

server = new Hapi.Server();

server.connection({
  port: process.env.PORT || 5000
});


/*
SETUP DB
 */

client = require('redis').createClient(process.env.REDIS_URL);

users = {};

auth = new Auth(users);


/*
  REGISTER VIEWS
 */

server.views({
  engines: {
    jade: require('jade')
  },
  relativeTo: __dirname,
  path: './views',
  layoutPath: './views/shared',
  isCached: false
});


/*
ROUTES
 */

server.route({
  method: 'GET',
  path: '/favicon.ico',
  handler: function(request, reply) {
    return reply.file("./favicon.ico");
  }
});

server.route({
  method: 'GET',
  path: '/images/{file*}',
  handler: {
    directory: {
      path: 'public/images',
      listing: true
    }
  }
});

server.route({
  method: 'GET',
  path: '/css/{file*}',
  handler: {
    directory: {
      path: 'public/css',
      listing: true
    }
  }
});

server.route({
  method: 'GET',
  path: '/scripts/{file*}',
  handler: {
    directory: {
      path: 'public/scripts',
      listing: true
    }
  }
});

server.route({
  method: 'GET',
  path: '/{file*}',
  handler: {
    directory: {
      path: 'public',
      listing: true
    }
  }
});

server.register(require('hapi-auth-cookie'), function(err) {
  var cookieOptions;
  if (err) {
    console.log(err);
  }
  cookieOptions = {
    password: 'dingodango',
    cookie: 'sid-example',
    isSecure: false
  };
  server.auth.strategy('session', 'cookie', cookieOptions);
  server.route({
    method: 'POST',
    path: '/signup',
    handler: function(req, reply) {
      var user;
      user = new User(req.payload.username, req.payload.password);
      if (user.isValid) {
        users[user.username] = user;
        req.auth.session.set(user);
        return reply.redirect("/");
      } else {
        return reply.view("index", {
          errors: "Invalid username or password."
        });
      }
    }
  });
  server.route({
    method: 'GET',
    path: '/signup',
    handler: function(req, reply) {
      return reply.redirect("/");
    }
  });
  server.route({
    method: 'GET',
    path: '/users',
    handler: function(req, reply) {
      return reply(users);
    }
  });
  server.route({
    method: 'POST',
    path: '/login',
    config: {
      auth: {
        strategy: "session",
        mode: 'try'
      },
      handler: function(req, reply) {
        return reply.view('index');
      }
    }
  });
  server.route({
    method: 'GET',
    path: '/logout',
    config: {
      auth: {
        strategy: "session",
        mode: 'try'
      }
    },
    handler: function(req, reply) {
      console.log(req.auth);
      if (req.auth.isAuthenticated) {
        req.auth.session.clear();
        return reply.view("logout");
      } else {
        return reply.redirect("/");
      }
    }
  });
  server.route({
    method: 'GET',
    path: '/',
    config: {
      auth: {
        strategy: "session",
        mode: 'try'
      },
      handler: function(req, reply) {
        if (req.auth.isAuthenticated) {
          return reply.view("index", {
            user: req.auth.credentials
          });
        } else {
          return reply.view('index');
        }
      }
    }
  });
  server.route({
    method: '*',
    path: '/{anything*}',
    handler: function(request, reply) {
      return reply.redirect("/");
    }
  });
  return server.start(function() {
    return console.log("Server running on " + server.info.uri);
  });
});
